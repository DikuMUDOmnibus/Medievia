/* Note: Some stuff like, which item value was the dice and acap was taken
   from cicrcle but it should convert easily if at all nessicary */
 
/* Weight Constants, used medievia.doc as reference */ 
#include <stdio.h>
#include "structs.h"
#include "mob.h"
#include "obj.h"
#include "tweak.h"

extern int number(int, int);

/* Returns the weight of an object as an int,  for  now it goes through the
   affects like a case statement, but makeing table of like 
	affectnum, weight would cut down on the code.....
   Put it in a table anyway for speed. */

int weigh(struct obj_data *obj)
{
int points=0, i=0;

    if(!obj) return(0);

    for (i=0;i<MAX_OBJ_AFFECT;i++) {
         points += weights[(int) obj->affected[i].location][1] * obj->affected[i].modifier;
    }
    switch(obj->obj_flags.type_flag) {
	case ITEM_ARMOR:
	    points += obj->obj_flags.value[0] * WEIGHT_ACAP;
	    break;
	case ITEM_WEAPON:
	    points += obj->obj_flags.value[1] * W_NUM_DICE;
	    points += obj->obj_flags.value[2] * W_SIZE_DICE;
	    break;
	default:	
	    break;
    }
    return(points);
} 	  
  
struct obj_data *tweak(struct obj_data *obj)
{
    int points, w;

    if(!obj) return(NULL);

    w = weigh(obj);

    points =   (w / number(5,15) )  * GLOBAL_TWEAK;


    if(number(1,1000) == 999)
        points = points * 3;

     if(points <= 0)
	 return(obj);

 /* Begin loop to go through and allocate points, if the area isn't 
  found, points is --'d and the loop goes on.. This is kinda stupid but
  i can't think of another way to randomly allocate stuff without lots of 
  extra code. This is really a preliminary throw together though.. There 
  is also some limits code so items don't get negative stats and such. But 
  i'm sure more is needed. Maybe, put a limit on that stat field into the 
  weights struct.*/ 

 while(points > 0) {
    switch(number(1,10)) {
 	case 1:
	case 2:
	case 3:
	  if(obj->affected[1].location == APPLY_NONE) {
		points--;
		break;
          }
	  if(abs(weights[(int) obj->affected[0].location][1]) > points) {
	     points--;
	     break;
  	   }
	   points -= abs(weights[(int) obj->affected[0].location][1]);
	   if(number(1,2) == 1) 
		obj->affected[0].modifier++;
	   else
	    if(obj->affected[0].modifier > 1 || (obj->affected[0].location == APPLY_AC))
		obj->affected[0].modifier--;
	   break;
	case 4:
	case 5:
	case 6:
	 if(obj->affected[1].location == APPLY_NONE) {
                points--;
                break;
          }

          if(abs(weights[(int) obj->affected[1].location][1]) > points) {
             points--;
             break;
           }
           points -= abs(weights[(int) obj->affected[1].location][1]);
           if(number(1,2) == 1)
                obj->affected[1].modifier++;
           else
	     if(obj->affected[1].modifier > 1 || (obj->affected[1].location == APPLY_AC))
                obj->affected[1].modifier--;
	   break;
	case 7:
	   if(obj->obj_flags.type_flag == ITEM_ARMOR) {
		if(points < WEIGHT_ACAP) {
		   points--;
		   break;
                }
	        points -= WEIGHT_ACAP;
	        if(number(1,2) == 1)
		  obj->obj_flags.value[0]++;
	  	else
		  obj->obj_flags.value[0]--;		  		 
	        break;
	  } else {
		points--;
		break;
          }
	case 8:
           if(obj->obj_flags.type_flag == ITEM_WEAPON) {
                if(points < (W_SIZE_DICE * 3) ) {
		   points--;
                   break;
		}
                points -= (W_SIZE_DICE * 3);
                if(number(1,2) == 1)
                  obj->obj_flags.value[2]++;
                else 
                 if(obj->obj_flags.value[2] > 1)
                   obj->obj_flags.value[2]--;
                break;
             } else {
		points--;
		break;
	     }
	case 9:
           if(obj->obj_flags.type_flag == ITEM_WEAPON) {
                if(points < (W_NUM_DICE * 3) ) {
		   points--;
                   break;
		}
                points -= (W_NUM_DICE * 3);
                if(number(1,2) == 1)
                  obj->obj_flags.value[1]++;
                else 
                 if(obj->obj_flags.value[1] > 1)
                   obj->obj_flags.value[1]--;
                break;
            } else {
                points--;
                break;
            }
	case 10:
	  points--;
	  break;
	default:
	  points--;
	  break;
    }
 }
 return(obj);
}

